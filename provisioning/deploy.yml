---

- name: Install common base
  gather_facts: False
  hosts: k8s-master
  become: yes
  vars:
    kubernetes_installed : '1'
    kubernetes_version : "=1.15.2-00"
    validated_dockerv: "=5:18.09.8~3-0~ubuntu-xenial"
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    # [WARNING]: Could not find aptitude. Using apt-get instead fix
  - name: "APT: Install aptitude package"
    apt:
      name: aptitude
      force_apt_get: yes
    # Install Docker and its dependent components.
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present
  - name: Install docker and its dependecies
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - 'docker-ce{{ validated_dockerv }}'
      - 'docker-ce-cli{{ validated_dockerv }}'
      - containerd.io
    notify:
      - docker status
  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker
   # Kubelet will not start if the system has swap enabled, so we are disabling swap using the below code.
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none
  - name: Disable swap
    command: swapoff -a
    when: kubernetes_installed > 0
  # Installing kubelet, kubeadm and kubectl using the below code
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - 'kubelet{{ kubernetes_version }}'
        - 'kubeadm{{ kubernetes_version }}'
        - 'kubectl{{ kubernetes_version }}'
  - name: Configure node ip
    lineinfile:
      create: yes
      state: present
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
  # Initialize the Kubernetes cluster with kubeadm using the below code (applicable only on master node).
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16
  # Setup the kube config file for the vagrant user to access the Kubernetes cluster using the below code
  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config
  # Setup the container networking provider and the network policy engine using the below code
  # - name: Install calico pod network
  #   become: false
  #   command: kubectl create -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml

  # Setup the container networking provider and the network policy engine using the below code
  - name: Install flannel pod network
    become: false
    command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml


  # Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named join-command.
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command
  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
  # Setup a handler for checking Docker daemon using the below code
  handlers:
  - name: docker status
    service: name=docker state=started

  roles:
    - common


- name: Install common base node-1
  gather_facts: False
  hosts: node-1
  become: yes
  vars:
      kubernetes_installed : '1'
      kubernetes_version : "=1.15.2-00"
      validated_dockerv: "=5:18.09.8~3-0~ubuntu-xenial"
      ansible_python_interpreter: /usr/bin/python3
  tasks:
    # [WARNING]: Could not find aptitude. Using apt-get instead fix
  - name: "APT: Install aptitude package"
    apt:
      name: aptitude
      force_apt_get: yes
    # Install Docker and its dependent components.
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present
  - name: Install docker and its dependecies
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - 'docker-ce{{ validated_dockerv }}'
      - 'docker-ce-cli{{ validated_dockerv }}'
      - containerd.io
    notify:
      - docker status
  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker
   # Kubelet will not start if the system has swap enabled, so we are disabling swap using the below code.
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none
  - name: Disable swap
    command: swapoff -a
    # when: ansible_swaptotal_mb > 0
    when: kubernetes_installed > 0
  # Installing kubelet, kubeadm and kubectl using the below code
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - 'kubelet{{ kubernetes_version }}'
        - 'kubeadm{{ kubernetes_version }}'
        - 'kubectl{{ kubernetes_version }}'
  - name: Configure node ip
    lineinfile:
      create: yes
      state: present
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
 # Join the nodes to the Kubernetes cluster
  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777
  - name: Join the node to cluster
    command: sh /tmp/join-command.sh
# Setup a handler for checking Docker daemon using the below code
  handlers:
  - name: docker status
    service: name=docker state=started

  roles:
    - common
    # - manage-ssh-keys

- name: Install common base node-2
  gather_facts: False
  hosts: node-2
  become: yes
  vars:
      kubernetes_installed : '1'
      kubernetes_version : "=1.15.2-00"
      validated_dockerv: "=5:18.09.8~3-0~ubuntu-xenial"
      ansible_python_interpreter: /usr/bin/python3
  tasks:
    # [WARNING]: Could not find aptitude. Using apt-get instead fix
  - name: "APT: Install aptitude package"
    apt:
      name: aptitude
      force_apt_get: yes
    # Install Docker and its dependent components.
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present
  - name: Install docker and its dependecies
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - 'docker-ce{{ validated_dockerv }}'
      - 'docker-ce-cli{{ validated_dockerv }}'
      - containerd.io
    notify:
      - docker status
  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker
   # Kubelet will not start if the system has swap enabled, so we are disabling swap using the below code.
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none
  - name: Disable swap
    command: swapoff -a
    # when: ansible_swaptotal_mb > 0
    when: kubernetes_installed > 0
  # Installing kubelet, kubeadm and kubectl using the below code
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - 'kubelet{{ kubernetes_version }}'
        - 'kubeadm{{ kubernetes_version }}'
        - 'kubectl{{ kubernetes_version }}'
  - name: Configure node ip
    lineinfile:
      create: yes
      state: present
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
 # Join the nodes to the Kubernetes cluster
  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777
  - name: Join the node to cluster
    command: sh /tmp/join-command.sh
# Setup a handler for checking Docker daemon using the below code
  handlers:
  - name: docker status
    service: name=docker state=started

  roles:
    - common
